A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

class Solution {
    public int[] diStringMatch(String s) {
        int res[]=new int[s.length()+1];
        int start=0,end=res.length-1,i=0;
        while(i<s.length())
        {
            if(s.charAt(i)=='I'){
                res[i]=start;
                start++;

            }
            else{
                res[i]=end;
                end--;
            }
            i++;
        }
        res[res.length-1]=start;
        return res;
    }
}
-----------------------------------------------------------

You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.

You must write a solution in O(log(m * n)) time complexity.
class Solution {
    public int findTheDistanceValue(int[] arr1, int[] arr2, int d) {

        int distance =0;

        for(int i=0;i<arr1.length;i++){
            boolean flag=false;

            for(int j=0;j<arr2.length;j++){
                if(Math.abs(arr1[i]-arr2[j])<=d){
                    flag=true;
                    break;
                }
            }
            if(!flag){
                distance++;
            }
        }
        return distance;


        
    }
}
----------------------------------------------------------
Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]

class Solution {
    public boolean validMountainArray(int[] arr) {
        

       int n = arr.length, i=0;
        while(i<n-1 && arr[i]<arr[i+1]) i++;
        if(i==0 || i==n-1 || arr[i]==arr[i+1]) return false;
        while(i<n-1 && arr[i]>arr[i+1]) i++;
        return i==n-1;

        
    }
}
----------------------------------------------------------------

 **Question 4**

Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]

**Output:** 2

</aside>
class Solution {
    public int findMaxLength(int[] a) {
        HashMap<Integer,Integer> map=new HashMap<>();
        int maxlen=0,sum=0;
        for(int i=0;i<a.length;i++){
            sum+=(a[i]==0?-1:a[i]);
            if(sum==0)
            maxlen=i+1;
            else if(map.containsKey(sum))
            maxlen=Math.max(maxlen,i-map.get(sum));
            else map.put(sum,i);
        }
        return maxlen;
        
    }
}
-----------------------------------------------
<aside>
ðŸ’¡ **Question 5**

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

**Example 1:**

**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]
Output: 40

</aside>
class Solution {

    public long minValue(long a[], long b[], long n) 
    {
        // Your code goes here
        Arrays.sort(a);
        Arrays.sort(b);
        long sum=0;
        int i=0,j=(int)(n-1);
        while(i<n){
            sum+=a[i]*b[j];
            i++;j--;
            
        }
      
        return sum;
    }
}
-------------------------------------------------
An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

class Solution {
    public int[] findOriginalArray(int[] changed) {
      int n = changed.length, i = 0;

        if (n % 2 == 1) return new int[0];

        int[] res = new int[n / 2];

        Map<Integer, Integer> count = new TreeMap<>();

        for (int a : changed)
            count.put(a, count.getOrDefault(a, 0) + 1);

        for (int x : count.keySet()) {
            if (count.get(x) > count.getOrDefault(x + x, 0))
                return new int[0];

            for (int j = 0; j < count.get(x); ++j) {
                res[i++] = x;
                count.put(x + x, count.get(x + x) - 1);
            }

        }
        return res;
  
    }
}
----------------------------------------------------------------------

<aside>
ðŸ’¡ **Question 7**

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

</aside>
class Solution {
    public int[][] generateMatrix(int n) {
        int[][] a=new int[n][n];
        int s=1;
        int left=0,right=n-1;
        int up=0,down=n-1;
        while(up<=down && left<=right){
            for(int i=left;i<=right;i++){
                a[up][i]=s++;
            }
            up++;
            for(int i=up;i<=down;i++){
                a[i][right]=s++;
            }
            right--;
            for(int i=right;i>=left;i--){
                a[down][i]=s++;

            }
            down--;
            for(int i=down;i>=up;i--){
                a[i][left]=s++;
            }
            left++;
        }
        return a;
        
    }
}
---------------------------------------------------------
Given two sparse matrices mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

package day4;

public class SparseMatrix {
	static int[][] matrix(int[][] a ,int[][] b){
		int res[][] = new int[a.length][b[0].length];
		for(int i=0;i<res.length;i++) {
			for(int k=0;k<a[0].length;k++) {
				if(a[i][k]!=0) {
					for(int j=0;j<res[0].length;j++) {
						res[i][j]=a[i][k]*b[k][j];
					}
				}
				
			}
		}
		return res;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] a= {{1,0,0},{-1,0,3}};
		int[][] b= {{7,0,0},{0,0,0},{0,0,1}};
		int [][]res=matrix(a,b);
		for(int[] row:res) {
			for(int ele:row) {
				System.out.print(ele+" ");
			}
		}
		

	}

}
